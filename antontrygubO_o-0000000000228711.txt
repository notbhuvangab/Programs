#include <bits/stdc++.h>


using namespace std;

using ll = long long;
using ld = long double;

#define mp make_pair

int p = 1000000007;


int mul(int a, int b) {
    return (1LL * a * b) % p;
}

int add(int a, int b) {
    int s = (a+b);
    if (s>=p) s-=p;
    return s;
}

int sub(int a, int b) {
    int s = (a+p-b);
    if (s>=p) s-=p;
    return s;
}

int po(int a, int deg)
{
    if (deg==0) return 1;
    if (deg%2==1) return mul(a, po(a, deg-1));
    int t = po(a, deg/2);
    return mul(t, t);
}

int inv(int n)
{
    return po(n, p-2);
}

struct DSU {
    vector<int> sz;
    vector<int> parent;

    void make_set(int v) {
        parent[v] = v;
        sz[v] = 1;
    }

    int find_set(int v) {
        if (v == parent[v])
            return v;
        return parent[v] = find_set(parent[v]);
    }

    void union_sets(int a, int b) {
        a = find_set(a);
        b = find_set(b);
        if (a != b) {
            if (sz[a] < sz[b])
                swap(a, b);
            parent[b] = a;
            sz[a] += sz[b];
        }
    }

    DSU(int n) {
        sz.resize(n);
        parent.resize(n);
        for (int i = 0; i < n; i++) make_set(i);
    }
};

/*const int N = 1200000;

vector<int> facs(N), invfacs(N);

void init()
{
    facs[0] = 1;
    for (int i = 1; i<N; i++) facs[i] = mul(facs[i-1], i);
    invfacs[N-1] = inv(facs[N-1]);
    for (int i = N-2; i>=0; i--) invfacs[i] = mul(invfacs[i+1], i+1);
}

int C(int n, int k)
{
    return mul(facs[n], mul(invfacs[k], invfacs[n-k]));
}*/

int b;

int ask(int pos)
{
    cout<<pos<<endl;
    int res;
    cin>>res;
    return res;
}

void solve(int test)
{
    vector<int> a(b+1);

    for (int i = 1; i<=5; i++) a[i] = ask(i);
    for (int i = b; i>=b-4; i--) a[i] = ask(i);

    int last = 5;
    while (last<b/2)
    {
        int dif = -1;
        for (int i = 1; i<=last; i++) if (a[i]!=a[b+1-i]) dif = i;
        int asked = 0;
        if (dif!=-1)
        {
            asked++;
            if (ask(dif)!=a[dif])
            {
                for (int i = 1; i<=last; i++) if (a[i]!=a[b+1 - i])
                {
                    a[i] = 1 - a[i];
                    a[b+1-i] = 1 - a[b+1-i];
                }
            }
        }
        int same = -1;
        for (int i = 1; i<=last; i++) if (a[i]==a[b+1-i]) same = i;
        if (same!=-1)
        {
            asked++;
            if (ask(same)!=a[same])
            {
                for (int i = 1; i<=last; i++) if (a[i]==a[b+1 - i])
                    {
                        a[i] = 1 - a[i];
                        a[b+1-i] = 1 - a[b+1-i];
                    }
            }
        }
        while (asked<2)
        {
            a[1] = ask(1);
            asked++;
        }
        for (int i = last+1; i<=last+4; i++)
        {
            a[i] = ask(i);
            a[b+1-i] = ask(b+1-i);
        }
        last+=4;
    }
    for (int i = 1; i<=b; i++) cout<<a[i];
    cout<<endl;
    string response;
    cin>>response;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(nullptr);

    int t;
    cin>>t>>b;
    for (int i = 1; i<=t; i++) solve(i);
}
